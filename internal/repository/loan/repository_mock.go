// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package loan

import (
	"context"
	mLoan "github.com/fadlinux/amartha_coding_test/internal/model/loan"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			AddLoanFunc: func(ctx context.Context, req mLoan.AddLoanRequest) (int64, error) {
//				panic("mock out the AddLoan method")
//			},
//			FetchByCifIdFunc: func(ctx context.Context, cifId int64) (int64, error) {
//				panic("mock out the FetchByCifId method")
//			},
//			FetchLoanIdFunc: func(ctx context.Context, loanId int64) (mLoan.AddLoanRequest, error) {
//				panic("mock out the FetchLoanId method")
//			},
//			UpdateLoanFunc: func(ctx context.Context, cifId int64, req mLoan.AddLoanRequest) error {
//				panic("mock out the UpdateLoan method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// AddLoanFunc mocks the AddLoan method.
	AddLoanFunc func(ctx context.Context, req mLoan.AddLoanRequest) (int64, error)

	// FetchByCifIdFunc mocks the FetchByCifId method.
	FetchByCifIdFunc func(ctx context.Context, cifId int64) (int64, error)

	// FetchLoanIdFunc mocks the FetchLoanId method.
	FetchLoanIdFunc func(ctx context.Context, loanId int64) (mLoan.AddLoanRequest, error)

	// UpdateLoanFunc mocks the UpdateLoan method.
	UpdateLoanFunc func(ctx context.Context, cifId int64, req mLoan.AddLoanRequest) error

	// calls tracks calls to the methods.
	calls struct {
		// AddLoan holds details about calls to the AddLoan method.
		AddLoan []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req mLoan.AddLoanRequest
		}
		// FetchByCifId holds details about calls to the FetchByCifId method.
		FetchByCifId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CifId is the cifId argument value.
			CifId int64
		}
		// FetchLoanId holds details about calls to the FetchLoanId method.
		FetchLoanId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// LoanId is the loanId argument value.
			LoanId int64
		}
		// UpdateLoan holds details about calls to the UpdateLoan method.
		UpdateLoan []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CifId is the cifId argument value.
			CifId int64
			// Req is the req argument value.
			Req mLoan.AddLoanRequest
		}
	}
	lockAddLoan      sync.RWMutex
	lockFetchByCifId sync.RWMutex
	lockFetchLoanId  sync.RWMutex
	lockUpdateLoan   sync.RWMutex
}

// AddLoan calls AddLoanFunc.
func (mock *RepositoryMock) AddLoan(ctx context.Context, req mLoan.AddLoanRequest) (int64, error) {
	if mock.AddLoanFunc == nil {
		panic("RepositoryMock.AddLoanFunc: method is nil but Repository.AddLoan was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req mLoan.AddLoanRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockAddLoan.Lock()
	mock.calls.AddLoan = append(mock.calls.AddLoan, callInfo)
	mock.lockAddLoan.Unlock()
	return mock.AddLoanFunc(ctx, req)
}

// AddLoanCalls gets all the calls that were made to AddLoan.
// Check the length with:
//
//	len(mockedRepository.AddLoanCalls())
func (mock *RepositoryMock) AddLoanCalls() []struct {
	Ctx context.Context
	Req mLoan.AddLoanRequest
} {
	var calls []struct {
		Ctx context.Context
		Req mLoan.AddLoanRequest
	}
	mock.lockAddLoan.RLock()
	calls = mock.calls.AddLoan
	mock.lockAddLoan.RUnlock()
	return calls
}

// FetchByCifId calls FetchByCifIdFunc.
func (mock *RepositoryMock) FetchByCifId(ctx context.Context, cifId int64) (int64, error) {
	if mock.FetchByCifIdFunc == nil {
		panic("RepositoryMock.FetchByCifIdFunc: method is nil but Repository.FetchByCifId was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		CifId int64
	}{
		Ctx:   ctx,
		CifId: cifId,
	}
	mock.lockFetchByCifId.Lock()
	mock.calls.FetchByCifId = append(mock.calls.FetchByCifId, callInfo)
	mock.lockFetchByCifId.Unlock()
	return mock.FetchByCifIdFunc(ctx, cifId)
}

// FetchByCifIdCalls gets all the calls that were made to FetchByCifId.
// Check the length with:
//
//	len(mockedRepository.FetchByCifIdCalls())
func (mock *RepositoryMock) FetchByCifIdCalls() []struct {
	Ctx   context.Context
	CifId int64
} {
	var calls []struct {
		Ctx   context.Context
		CifId int64
	}
	mock.lockFetchByCifId.RLock()
	calls = mock.calls.FetchByCifId
	mock.lockFetchByCifId.RUnlock()
	return calls
}

// FetchLoanId calls FetchLoanIdFunc.
func (mock *RepositoryMock) FetchLoanId(ctx context.Context, loanId int64) (mLoan.AddLoanRequest, error) {
	if mock.FetchLoanIdFunc == nil {
		panic("RepositoryMock.FetchLoanIdFunc: method is nil but Repository.FetchLoanId was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		LoanId int64
	}{
		Ctx:    ctx,
		LoanId: loanId,
	}
	mock.lockFetchLoanId.Lock()
	mock.calls.FetchLoanId = append(mock.calls.FetchLoanId, callInfo)
	mock.lockFetchLoanId.Unlock()
	return mock.FetchLoanIdFunc(ctx, loanId)
}

// FetchLoanIdCalls gets all the calls that were made to FetchLoanId.
// Check the length with:
//
//	len(mockedRepository.FetchLoanIdCalls())
func (mock *RepositoryMock) FetchLoanIdCalls() []struct {
	Ctx    context.Context
	LoanId int64
} {
	var calls []struct {
		Ctx    context.Context
		LoanId int64
	}
	mock.lockFetchLoanId.RLock()
	calls = mock.calls.FetchLoanId
	mock.lockFetchLoanId.RUnlock()
	return calls
}

// UpdateLoan calls UpdateLoanFunc.
func (mock *RepositoryMock) UpdateLoan(ctx context.Context, cifId int64, req mLoan.AddLoanRequest) error {
	if mock.UpdateLoanFunc == nil {
		panic("RepositoryMock.UpdateLoanFunc: method is nil but Repository.UpdateLoan was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		CifId int64
		Req   mLoan.AddLoanRequest
	}{
		Ctx:   ctx,
		CifId: cifId,
		Req:   req,
	}
	mock.lockUpdateLoan.Lock()
	mock.calls.UpdateLoan = append(mock.calls.UpdateLoan, callInfo)
	mock.lockUpdateLoan.Unlock()
	return mock.UpdateLoanFunc(ctx, cifId, req)
}

// UpdateLoanCalls gets all the calls that were made to UpdateLoan.
// Check the length with:
//
//	len(mockedRepository.UpdateLoanCalls())
func (mock *RepositoryMock) UpdateLoanCalls() []struct {
	Ctx   context.Context
	CifId int64
	Req   mLoan.AddLoanRequest
} {
	var calls []struct {
		Ctx   context.Context
		CifId int64
		Req   mLoan.AddLoanRequest
	}
	mock.lockUpdateLoan.RLock()
	calls = mock.calls.UpdateLoan
	mock.lockUpdateLoan.RUnlock()
	return calls
}
