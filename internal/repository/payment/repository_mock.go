// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package payment

import (
	"context"
	mPayment "github.com/fadlinux/amartha_coding_test/internal/model/payment"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			AddPaymentFunc: func(ctx context.Context, req mPayment.AddPaymentRequest) (int64, error) {
//				panic("mock out the AddPayment method")
//			},
//			GetIdFunc: func(ctx context.Context, paymentId int64) ([]mPayment.AddPaymentRequest, error) {
//				panic("mock out the GetId method")
//			},
//			GetSumTotalFunc: func(ctx context.Context, loanId int64) (int64, error) {
//				panic("mock out the GetSumTotal method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// AddPaymentFunc mocks the AddPayment method.
	AddPaymentFunc func(ctx context.Context, req mPayment.AddPaymentRequest) (int64, error)

	// GetIdFunc mocks the GetId method.
	GetIdFunc func(ctx context.Context, paymentId int64) ([]mPayment.AddPaymentRequest, error)

	// GetSumTotalFunc mocks the GetSumTotal method.
	GetSumTotalFunc func(ctx context.Context, loanId int64) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddPayment holds details about calls to the AddPayment method.
		AddPayment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req mPayment.AddPaymentRequest
		}
		// GetId holds details about calls to the GetId method.
		GetId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PaymentId is the paymentId argument value.
			PaymentId int64
		}
		// GetSumTotal holds details about calls to the GetSumTotal method.
		GetSumTotal []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// LoanId is the loanId argument value.
			LoanId int64
		}
	}
	lockAddPayment  sync.RWMutex
	lockGetId       sync.RWMutex
	lockGetSumTotal sync.RWMutex
}

// AddPayment calls AddPaymentFunc.
func (mock *RepositoryMock) AddPayment(ctx context.Context, req mPayment.AddPaymentRequest) (int64, error) {
	if mock.AddPaymentFunc == nil {
		panic("RepositoryMock.AddPaymentFunc: method is nil but Repository.AddPayment was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req mPayment.AddPaymentRequest
	}{
		Ctx: ctx,
		Req: req,
	}
	mock.lockAddPayment.Lock()
	mock.calls.AddPayment = append(mock.calls.AddPayment, callInfo)
	mock.lockAddPayment.Unlock()
	return mock.AddPaymentFunc(ctx, req)
}

// AddPaymentCalls gets all the calls that were made to AddPayment.
// Check the length with:
//
//	len(mockedRepository.AddPaymentCalls())
func (mock *RepositoryMock) AddPaymentCalls() []struct {
	Ctx context.Context
	Req mPayment.AddPaymentRequest
} {
	var calls []struct {
		Ctx context.Context
		Req mPayment.AddPaymentRequest
	}
	mock.lockAddPayment.RLock()
	calls = mock.calls.AddPayment
	mock.lockAddPayment.RUnlock()
	return calls
}

// GetId calls GetIdFunc.
func (mock *RepositoryMock) GetId(ctx context.Context, paymentId int64) ([]mPayment.AddPaymentRequest, error) {
	if mock.GetIdFunc == nil {
		panic("RepositoryMock.GetIdFunc: method is nil but Repository.GetId was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		PaymentId int64
	}{
		Ctx:       ctx,
		PaymentId: paymentId,
	}
	mock.lockGetId.Lock()
	mock.calls.GetId = append(mock.calls.GetId, callInfo)
	mock.lockGetId.Unlock()
	return mock.GetIdFunc(ctx, paymentId)
}

// GetIdCalls gets all the calls that were made to GetId.
// Check the length with:
//
//	len(mockedRepository.GetIdCalls())
func (mock *RepositoryMock) GetIdCalls() []struct {
	Ctx       context.Context
	PaymentId int64
} {
	var calls []struct {
		Ctx       context.Context
		PaymentId int64
	}
	mock.lockGetId.RLock()
	calls = mock.calls.GetId
	mock.lockGetId.RUnlock()
	return calls
}

// GetSumTotal calls GetSumTotalFunc.
func (mock *RepositoryMock) GetSumTotal(ctx context.Context, loanId int64) (int64, error) {
	if mock.GetSumTotalFunc == nil {
		panic("RepositoryMock.GetSumTotalFunc: method is nil but Repository.GetSumTotal was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		LoanId int64
	}{
		Ctx:    ctx,
		LoanId: loanId,
	}
	mock.lockGetSumTotal.Lock()
	mock.calls.GetSumTotal = append(mock.calls.GetSumTotal, callInfo)
	mock.lockGetSumTotal.Unlock()
	return mock.GetSumTotalFunc(ctx, loanId)
}

// GetSumTotalCalls gets all the calls that were made to GetSumTotal.
// Check the length with:
//
//	len(mockedRepository.GetSumTotalCalls())
func (mock *RepositoryMock) GetSumTotalCalls() []struct {
	Ctx    context.Context
	LoanId int64
} {
	var calls []struct {
		Ctx    context.Context
		LoanId int64
	}
	mock.lockGetSumTotal.RLock()
	calls = mock.calls.GetSumTotal
	mock.lockGetSumTotal.RUnlock()
	return calls
}
