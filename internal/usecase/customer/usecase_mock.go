// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package customer

import (
	"context"
	mCustomer "github.com/fadlinux/amartha_coding_test/internal/model/customer"
	"sync"
)

// Ensure, that UsecaseMock does implement Usecase.
// If this is not the case, regenerate this file with moq.
var _ Usecase = &UsecaseMock{}

// UsecaseMock is a mock implementation of Usecase.
//
//	func TestSomethingThatUsesUsecase(t *testing.T) {
//
//		// make and configure a mocked Usecase
//		mockedUsecase := &UsecaseMock{
//			AddCustomerFunc: func(ctx context.Context, request mCustomer.AddCustomerRequest) (int64, error) {
//				panic("mock out the AddCustomer method")
//			},
//			GetCustomerFunc: func(ctx context.Context, cifId int64) (mCustomer.AddCustomerRequest, error) {
//				panic("mock out the GetCustomer method")
//			},
//			GetExistCifIdFunc: func(ctx context.Context, cifId int64) (bool, error) {
//				panic("mock out the GetExistCifId method")
//			},
//			UpdateCustomerFunc: func(ctx context.Context, cifId int64, request mCustomer.AddCustomerRequest) error {
//				panic("mock out the UpdateCustomer method")
//			},
//		}
//
//		// use mockedUsecase in code that requires Usecase
//		// and then make assertions.
//
//	}
type UsecaseMock struct {
	// AddCustomerFunc mocks the AddCustomer method.
	AddCustomerFunc func(ctx context.Context, request mCustomer.AddCustomerRequest) (int64, error)

	// GetCustomerFunc mocks the GetCustomer method.
	GetCustomerFunc func(ctx context.Context, cifId int64) (mCustomer.AddCustomerRequest, error)

	// GetExistCifIdFunc mocks the GetExistCifId method.
	GetExistCifIdFunc func(ctx context.Context, cifId int64) (bool, error)

	// UpdateCustomerFunc mocks the UpdateCustomer method.
	UpdateCustomerFunc func(ctx context.Context, cifId int64, request mCustomer.AddCustomerRequest) error

	// calls tracks calls to the methods.
	calls struct {
		// AddCustomer holds details about calls to the AddCustomer method.
		AddCustomer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request mCustomer.AddCustomerRequest
		}
		// GetCustomer holds details about calls to the GetCustomer method.
		GetCustomer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CifId is the cifId argument value.
			CifId int64
		}
		// GetExistCifId holds details about calls to the GetExistCifId method.
		GetExistCifId []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CifId is the cifId argument value.
			CifId int64
		}
		// UpdateCustomer holds details about calls to the UpdateCustomer method.
		UpdateCustomer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CifId is the cifId argument value.
			CifId int64
			// Request is the request argument value.
			Request mCustomer.AddCustomerRequest
		}
	}
	lockAddCustomer    sync.RWMutex
	lockGetCustomer    sync.RWMutex
	lockGetExistCifId  sync.RWMutex
	lockUpdateCustomer sync.RWMutex
}

// AddCustomer calls AddCustomerFunc.
func (mock *UsecaseMock) AddCustomer(ctx context.Context, request mCustomer.AddCustomerRequest) (int64, error) {
	if mock.AddCustomerFunc == nil {
		panic("UsecaseMock.AddCustomerFunc: method is nil but Usecase.AddCustomer was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request mCustomer.AddCustomerRequest
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockAddCustomer.Lock()
	mock.calls.AddCustomer = append(mock.calls.AddCustomer, callInfo)
	mock.lockAddCustomer.Unlock()
	return mock.AddCustomerFunc(ctx, request)
}

// AddCustomerCalls gets all the calls that were made to AddCustomer.
// Check the length with:
//
//	len(mockedUsecase.AddCustomerCalls())
func (mock *UsecaseMock) AddCustomerCalls() []struct {
	Ctx     context.Context
	Request mCustomer.AddCustomerRequest
} {
	var calls []struct {
		Ctx     context.Context
		Request mCustomer.AddCustomerRequest
	}
	mock.lockAddCustomer.RLock()
	calls = mock.calls.AddCustomer
	mock.lockAddCustomer.RUnlock()
	return calls
}

// GetCustomer calls GetCustomerFunc.
func (mock *UsecaseMock) GetCustomer(ctx context.Context, cifId int64) (mCustomer.AddCustomerRequest, error) {
	if mock.GetCustomerFunc == nil {
		panic("UsecaseMock.GetCustomerFunc: method is nil but Usecase.GetCustomer was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		CifId int64
	}{
		Ctx:   ctx,
		CifId: cifId,
	}
	mock.lockGetCustomer.Lock()
	mock.calls.GetCustomer = append(mock.calls.GetCustomer, callInfo)
	mock.lockGetCustomer.Unlock()
	return mock.GetCustomerFunc(ctx, cifId)
}

// GetCustomerCalls gets all the calls that were made to GetCustomer.
// Check the length with:
//
//	len(mockedUsecase.GetCustomerCalls())
func (mock *UsecaseMock) GetCustomerCalls() []struct {
	Ctx   context.Context
	CifId int64
} {
	var calls []struct {
		Ctx   context.Context
		CifId int64
	}
	mock.lockGetCustomer.RLock()
	calls = mock.calls.GetCustomer
	mock.lockGetCustomer.RUnlock()
	return calls
}

// GetExistCifId calls GetExistCifIdFunc.
func (mock *UsecaseMock) GetExistCifId(ctx context.Context, cifId int64) (bool, error) {
	if mock.GetExistCifIdFunc == nil {
		panic("UsecaseMock.GetExistCifIdFunc: method is nil but Usecase.GetExistCifId was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		CifId int64
	}{
		Ctx:   ctx,
		CifId: cifId,
	}
	mock.lockGetExistCifId.Lock()
	mock.calls.GetExistCifId = append(mock.calls.GetExistCifId, callInfo)
	mock.lockGetExistCifId.Unlock()
	return mock.GetExistCifIdFunc(ctx, cifId)
}

// GetExistCifIdCalls gets all the calls that were made to GetExistCifId.
// Check the length with:
//
//	len(mockedUsecase.GetExistCifIdCalls())
func (mock *UsecaseMock) GetExistCifIdCalls() []struct {
	Ctx   context.Context
	CifId int64
} {
	var calls []struct {
		Ctx   context.Context
		CifId int64
	}
	mock.lockGetExistCifId.RLock()
	calls = mock.calls.GetExistCifId
	mock.lockGetExistCifId.RUnlock()
	return calls
}

// UpdateCustomer calls UpdateCustomerFunc.
func (mock *UsecaseMock) UpdateCustomer(ctx context.Context, cifId int64, request mCustomer.AddCustomerRequest) error {
	if mock.UpdateCustomerFunc == nil {
		panic("UsecaseMock.UpdateCustomerFunc: method is nil but Usecase.UpdateCustomer was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		CifId   int64
		Request mCustomer.AddCustomerRequest
	}{
		Ctx:     ctx,
		CifId:   cifId,
		Request: request,
	}
	mock.lockUpdateCustomer.Lock()
	mock.calls.UpdateCustomer = append(mock.calls.UpdateCustomer, callInfo)
	mock.lockUpdateCustomer.Unlock()
	return mock.UpdateCustomerFunc(ctx, cifId, request)
}

// UpdateCustomerCalls gets all the calls that were made to UpdateCustomer.
// Check the length with:
//
//	len(mockedUsecase.UpdateCustomerCalls())
func (mock *UsecaseMock) UpdateCustomerCalls() []struct {
	Ctx     context.Context
	CifId   int64
	Request mCustomer.AddCustomerRequest
} {
	var calls []struct {
		Ctx     context.Context
		CifId   int64
		Request mCustomer.AddCustomerRequest
	}
	mock.lockUpdateCustomer.RLock()
	calls = mock.calls.UpdateCustomer
	mock.lockUpdateCustomer.RUnlock()
	return calls
}
